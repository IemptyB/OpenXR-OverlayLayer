8/31
{"input_select_click", "input/select/click", XR_ACTION_TYPE_FLOAT_INPUT, {"/user/hand/left", "/user/hand/right"}}
{"input_menu_click", squeeze_value", "input/squeeze/value", XR_ACTION_TYPE_FLOAT_INPUT, {"/user/hand/left", "/user/hand/right"}}
{"squeeze_click", "input/squeeze/click", XR_ACTION_TYPE_FLOAT_INPUT, {"/user/hand/left", "/user/hand/right"}}
{"khr/simple_controller", {
    {"input_select_click", "input/select/click", XR_ACTION_TYPE_FLOAT_INPUT, {"user/hand/left", "user/hand/right"}}
    {"input_menu_click", "input/menu/click", XR_ACTION_TYPE_BOOLEAN_INPUT, {"user/hand/left", "user/hand/right"}}
    {"input_grip_pose", XR_ACTION_TYPE_POSE_INPUT, {"user/hand/left", "user/hand/right"}}
    {"input_aim_pose", XR_ACTION_TYPE_POSE_INPUT, {"user/hand/left", "user/hand/right"}}
    {"output_haptic", XR_ACTION_TYPE_VIBRATION_OUTPUT, {"user/hand/left", "user/hand/right"}}
}
        std::array<XrPath, Side::COUNT> selectPath;
        std::array<XrPath, Side::COUNT> squeezeValuePath;
        std::array<XrPath, Side::COUNT> squeezeClickPath;
        std::array<XrPath, Side::COUNT> posePath;
        std::array<XrPath, Side::COUNT> hapticPath;
        std::array<XrPath, Side::COUNT> menuClickPath;
        CHECK_XRCMD(xrStringToPath(m_instance, "/user/hand/left/input/select/click", &selectPath[Side::LEFT]));
        CHECK_XRCMD(xrStringToPath(m_instance, "/user/hand/right/input/select/click", &selectPath[Side::RIGHT]));
        CHECK_XRCMD(xrStringToPath(m_instance, "/user/hand/left/input/squeeze/value", &squeezeValuePath[Side::LEFT]));
        CHECK_XRCMD(xrStringToPath(m_instance, "/user/hand/right/input/squeeze/value", &squeezeValuePath[Side::RIGHT]));
        CHECK_XRCMD(xrStringToPath(m_instance, "/user/hand/left/input/squeeze/click", &squeezeClickPath[Side::LEFT]));
        CHECK_XRCMD(xrStringToPath(m_instance, "/user/hand/right/input/squeeze/click", &squeezeClickPath[Side::RIGHT]));
        CHECK_XRCMD(xrStringToPath(m_instance, "/user/hand/left/input/grip/pose", &posePath[Side::LEFT]));
        CHECK_XRCMD(xrStringToPath(m_instance, "/user/hand/right/input/grip/pose", &posePath[Side::RIGHT]));
        CHECK_XRCMD(xrStringToPath(m_instance, "/user/hand/left/output/haptic", &hapticPath[Side::LEFT]));
        CHECK_XRCMD(xrStringToPath(m_instance, "/user/hand/right/output/haptic", &hapticPath[Side::RIGHT]));
        CHECK_XRCMD(xrStringToPath(m_instance, "/user/hand/left/input/menu/click", &menuClickPath[Side::LEFT]));
        CHECK_XRCMD(xrStringToPath(m_instance, "/user/hand/right/input/menu/click", &menuClickPath[Side::RIGHT]));

8/17
Items in IPCSerialize
    auto dst = new(ipcbuf) IPCXrCommandName;
    atomic
        xr handle -> direct copy (asume other function does handle substitution)
            "type" : "POD"
            "pod_type" : handle_type
        xr atom -> direct copy
            "type" : "POD"
            "pod_type" : atom_type
        capacity INPUT / uint32_t -> direct copy
            "type" : "POD"
            "pod_type" : "uint32_t"
    pointer to thingie output
        MUST addOffsetToPointer for all serialized pointers
        capacity OUTPUT / uint32_t -> IPCSerializeNoCopy template on one item
            "type" : "pointer_to_pod"
            "pod_type" : "uint32_t"
        pointer to block of atomics / uint32_t -> IPCSerializeNoCopy template on array 
            "type" : "fixed_array"
            "base_type" : ...
            "size" : input variable
            e.g. swapchain formats, viewConfigurationTypes
        pointer to INPUT XR struct chain -> IPCSerialize to generated Copy, COPY_EVERYTHING
            "is_const" : True
            "type" : "xrstruct_pointer"
            "struct_type" : ...
            these are "const" in parameters
            e.g. GetInstanceProperties
        pointer to OUTPUT XR struct chain -> IPCSerialize to generated Copy, COPY_ONLY_TYPE_NEXT (but this is an optimization, should be safe to copy?)
            "is_const" : False
            "type" : "xrstruct_pointer"
            "struct_type" : ...
            these are NOT "const" in parameters
            e.g. GetInstanceProperties
        pointer to OUTPUT block of XR structs
            "type" : "pointer_to_xr_struct_array"
            "struct_type" : member["size"], member["member_text"])
            "name" : name
            "size" : size variable or enum
            new(ipcbuf) block of structs, then for each element in array
                copy ->type
                call IPCSerialize on each element.next
            e.g. IPCXrEnumerateViewConfigurationViews


8/13
shared_ptr guarantees thread-safe control - deletion, copy, reset, etc.
    https://www.modernescpp.com/index.php/atomic-smart-pointers#:~:text=yes%20and%20no.-,Why%3F,will%20be%20deleted%20exactly%20once.
    But OBJECT is still not thread safe.
    all members could be private and all methods take the lock
        init-only const accessors for private members (need to put in ctor) - no locking
        otherwise return-by-value and set functions would lock in order to be atomic / exclusive

8/12
Make as many objects simple copies as possible (e.g. RPCConnections is just HANDLEs and DWORDs and void*s)
Identify any objects that may be accessed by multiple threads and why
    unordered_maps mapping handles to tracking state must be locked
        will be appended from negotiation thread
        may have elements removed by overlay service thread
    map of overlay thread ID to overlay state
    list of overlay-owned objects in main process does *not* need to be locked?
        they will only get destroyed in the overlay service thread?  What about 
Why not just lock every API layer call?
    Why?  Only Destroy has to be externally synchronized.  That means we won't be inside an XR command in an app's explicit threads when the handle is Destroyed.
        But we could be in the overlay service thread accessing, say XrSession, when it is Destroyed. 


Any RPC should check for Main Instance lost, return INSTANCE_LOST and Overlay convert to INITIALIZATION_FAILED

CreateSession is an RPC Call
    parameters are:
        const XrInstanceCreateInfo*                 instanceCreateInfo;
        const XrSessionCreateInfo*                  createInfo;
        XrSession*                                  session;
    sendRPC["instanceCreateInfo"] = "%(member)s = gOverlaysLayerXrInstanceToHandleInfo.at(*instance).createInfo;\n"
    sendRPC["instanceCreateInfo"] = "%(member)s = gOverlaysLayerXrInstanceToHandleInfo.at(*instance).createInfo;\n"
    if not annotated, parameters are from and then to command call
    otherwise parameters annoted with "sendRPC" and "receiveRPC" for code to insert before RPC and after

OverlaysLayerLogMessage
    should key on instance, so that MainAsOverlay calls OverlaysLogMessage with remote instance and it is known to route there
    should key on any proxy objects, so that if runtime encounters any issues, proxy debug messenger can send to overlay...?

DestroySession

destroying main session
    poison all overlay IPC using ConnectionToOverlay
    SetEvent(gNegotiationChannels.mainNegotiateThreadStop);
    WaitForSingleObject(gNegotiationChannels.mainThread, INFINITE);
    gMainSessionInstance = XR_NULL_HANDLE;
    ReleaseMutex(gNegotiationChannels.mainMutexHandle);

destroying instance that was used to create main session
    if(instance == gMainSessionInstance) {
        call same functions as destroy main session
    }

/interaction_profiles/microsoft/xbox_controller/user/gamepad/input/thumbstick_left/click
    /interaction_profiles/microsoft/xbox_controller
    /user/gamepad
    .../input/thumbstick_left/click


LocalAction {
    createInfo
    XrResult getBoolean(XrActionStateBoolean *state)
    {
        if(createInfo->type != XR_ACTION_TYPE_BOOLEAN_INPUT) {
            return XR_ERROR_ACTION_TYPE_MISMATCH; 
        }
        *state = booleanState;
        return XR_SUCCESS;
    }
    // etc
    union {
        XrActionStateBoolean booleanState;
        // etc;
    };

}

OverlaysLayerXrActionSetHandleInfo, add:
    std::vector<XrAction> actions;          // main side only
    std::set<OverlaysLayerXrActionHandleInfo::Ptr> placeholderActions;  // main side only
    std::set<OverlaysLayerLocalActionHandleInfo::Ptr> localActions;        // overlay side only
    bool mutable = true; // false after attach

OverlaysLayerXrActionHandleInfo, add:
    OverlaysLayerXrActionSetHandleInfo::Ptr parentActionHandle;

typedef std::pair<std::string str, XrPath path> StringAndPath;
enum WellKnownStringIndex {
    USER_HAND_LEFT = 1,
    INPUT_SQUEEZE_VALUE = 2,
    USER_HAND_LEFT_INPUT_SQUEEZE_VALUE = 3,
    KHR_SIMPLE_CONTROLLER = 4,
    // etc
}; // These will need to not change for subsequent versions for backward compatibility

std::unordered_map<WellKnownStringIndex, StringAndPath> OverlaysLayerWellKnownStrings = {
    {USER_HAND_LEFT, {"/user/hand/left"}},
    {INPUT_SQUEEZE_VALUE, {"input/squeeze/value"}},
    {USER_HAND_LEFT_INPUT_SQUEEZE_VALUE, {"/user/hand/left/input/squeeze/value"}},
    {KHR_SIMPLE_CONTROLLER, {"/interaction_profiles/khr/simple_controller"}},
    // etc
};

// construct maybe in createLayerInstance from OverlaysLayerWellKnownStringFromEnum
std::unordered_map<std::string, WellKnownStringIndex> OverlaysLayerWellKnownStringToEnum; // ?
std::unordered_map<XrPath, WellKnownStringIndex> OverlaysLayerWellKnownPathToEnum; // ?

struct PlaceholderActionBinding
{
    WellKnownStringIndex subActionString;
    WellKnownStringIndex componentString;
    XrPath subActionPath; 
    XrPath bindingPath; // a Path with subaction and component concatenated
};

struct PlaceholderActionProfile
{
    WellKnownStringIndex interactionProfileString;
    XrPath interactionProfilePath;
    std::vector<PlaceholderActionBinding> bindings;
};

struct PlaceholderActionId {
    std::string name; // "name of thingie here?"
    XrActionType type;
    std::vector<PlaceHolderActionProfile> placeholderActionProfiles;
};

std::vector<PlaceholderActionId> PlaceholderActionIds = {
    /* PlaceholderActionId: */ {
        "/interaction_profiles/khr/simple_controller/user/hand/left/input/squeeze/value",
        XR_ACTION_TYPE_FLOAT,
        {
            /* PlaceholderActionProfile: */ {
                KHR_SIMPLE_CONTROLLER,
                XR_NULL_PATH, // set at init time
                {
                    /* PlaceholderActionBinding: */ {
                        USER_HAND_LEFT,
                        INPUT_SQUEEZE_VALUE,
                        XR_NULL_PATH, XR_NULL_PATH, // set at init time
                    },
                    ...
                }
            }
        }
    },
};

So we know that if the overlay suggested for "/interaction_profiles/khr/simple_controller/" binding an action to "/user/hand/left/input/squeeze/value", we can query the action we created and bound for those.


hello_xr output:
    profile null_path
    bound "grab" to 0 sources...
    bound "pose" to 0 sources...
    bound "quit" to 0 sources...
    bound "vibrate" to 0 sources...
    [15:29:53.457][Info   ] XrEventDataSessionStateChanged: state XR_SESSION_STATE_SYNCHRONIZED->XR_SESSION_STATE_VISIBLE session=72165140019019777 time=1060087400739200
    [15:29:53.458][Info   ] XrEventDataSessionStateChanged: state XR_SESSION_STATE_VISIBLE->XR_SESSION_STATE_FOCUSED session=72165140019019777 time=1060087400774200
    profile oculus/touch_controller
    bound "grab" to 2 sources...
        "/user/hand/left/input/squeeze/value"("Left Hand Oculus Touch Squeeze")
        "/user/hand/right/input/squeeze/value"("Right Hand Oculus Touch Squeeze")
    bound "pose" to 2 sources...
        "/user/hand/left/input/grip/pose"("Left Hand Oculus Touch Grip Pose")
        "/user/hand/right/input/grip/pose"("Right Hand Oculus Touch Grip Pose")
    bound "quit" to 1 sources...
        "/user/hand/left/input/menu/click"("Left Hand Oculus Touch Menu Button")
    bound "vibrate" to 2 sources...
        "/user/hand/left/output/haptic"("Left Hand Oculus Touch Vibration")
        "/user/hand/right/output/haptic"("Right Hand Oculus Touch Vibration")

Applications "may" suggest interaction profile bindings
    SuggestInteractionProfileBindings provides a tuple {interaction_profile path, binding path, action}
        EnumerateBoundSourcesForAction provides 0 or more source binding paths for an action
            source binding paths can be changed into strings
            each can be compared against other interaction profile binding path strings
    if bindings aren't suggested, input can't be routed because runtime has no idea what actions mean what
    So, for a given action, IF AN INTERACTION PROFILE BINDING HAS BEEN SUGGESTED, one may reverse-lookup 0 or more interaction profile binding paths for the action.
        e.g. in hello_xr, grabAction for interaction profiles is the following bindings:
            "/interaction_profiles/khr/simple_controller"
                "/user/hand/left/input/select/click"
                "/user/hand/right/input/select/click"
            "/interaction_profiles/oculus/touch_controller"
                "/user/hand/left/input/squeeze/value"
                "/user/hand/right/input/squeeze/value"
            "/interaction_profiles/htc/vive_controller"
                "/user/hand/left/input/squeeze/click"
                "/user/hand/right/input/squeeze/click"
            "/interaction_profiles/microsoft/motion_controller" (bindings same as htc/vive_controller)
                "/user/hand/left/input/squeeze/click"
                "/user/hand/right/input/squeeze/click"
        The list of Paths for a given action can be refined further by using the current interaction profile name
            e.g. if one knows the interaction profile is oculus/touch_controller, then one can know that grabAction is {left,right}/input/squeeze/value
            if one does not know the interaction profile, then what?
                Just check all of them?
        further a subactionpath might disambiguate fully mapping an action to a binding
        if overlay suggests "select/click" for XrAction bar and main suggests "select/click" for XrAction foo, xrGetActionStateBoolean on bar could return the same as for foo.
    However, an app may suggest only khr/simple_controller and not the others.
        what if overlay suggests "khr/simple_controller" "select/click" for XrAction bar, and main suggests "oculus/touch_controller" "squeeze/value" for XrAction foo.
            Should OverlaysLayer be responsible for converting input profiles?
                xrGetCurrentInteractionProfile would need to translate from oculus/touch_controller to khr/simplecontroller
                xrGetActionStateBoolean would need to know {"oculus/touch_controller","squeeze/value"} can be reasonably approximated by {"khr/simple_controller","select/click"}
                Overlay Layer would need a mapping with entries from {main profile, main binding} to {overlay profile, overlay binding}
                if main suggests bindings in a profile that Overlay Layer doesn't know, probably have to punt for now.
                Maybe punt in general if main's selected interaction profile is not suggested at all by overlay.
    overlay XrActions may not have the same types as main XrActions for the same bindings.
        May be able to do conversions one direction but not the other..
        punt here too if they don't match?
    An overlay app may suggest bindings for a profile that don't 100% overlap with 100% of main app's bindings
        also punt, I guess.  Some overlay app Actions won't then receive input.
    Finally, an XrAction may be bound to multiple input paths.  See 11.5.1 - "Resolving a single action bound to multiple inputs or outputs" for how that's resolved
    XrAction -> look up in suggested interaction bindings, refine by current interaction profile, results in >= 0 profile paths
        need to catch profile changed event 

If the Overlay knows what main XrActions are bound to which paths at the moment of xrGetActionState*, it can call xrGetActionState on the main XrAction.
    this won't work until main calls xrSyncActions, or if main calls xrSyncActions... at all?
        Overlay could have main call xrSyncActions if main hasn't called it already, and skip the next main xrSyncActions.
        Is it safe to call twice?
    Overlay will need to read state of all XrActions at xrSyncActions and keep locally, otherwise a call by main to xrSyncActions would make subsequent xrGetActionState calls return inconsistent results.


xrPollEvent
    Main
        if profile changed event, save the current profile
    Overlay
        translate profile changed event if possible
ActionSet:
struct PlaceholderActionBinding
{
    WellKnownStringIndex subActionString;
    WellKnownStringIndex componentString;
    XrPath subActionPath; 
    XrPath bindingPath; // a Path with subaction and component concatenated
};

struct PlaceholderActionProfile
{
    WellKnownStringIndex interactionProfileString;
    XrPath interactionProfilePath;
    std::vector<PlaceholderActionBinding> bindings;
};

struct PlaceholderActionId {
    std::string name; // "name of thingie here?"
    XrActionType type;
    std::vector<PlaceHolderActionProfile> placeholderActionProfiles;
};

XXX PRIORITY????
XXX PRIORITY????
XXX PRIORITY????
XXX PRIORITY????

    xrCreateActionSet
        downchain->Create
        for(const& ph : PlaceholderActionIds) {
            XrAction action;
            XrActionCreateInfo createInfo = {...};
            downchain->CreateAction(instance, &createInfo, action);
            actionInfo = std::make_shared<OverlaysLayerCreateActionHandleInfo>(...)
            actionsetInfo->placeholderActions.insert(actionInfo);
        }
        save createInfo
    xrDestroyActionSet
        placeholderActions.clear() so placeholder Actions are Destroy()ed
        downchain->Destroy

Action:
    create normally
    save local state
        make local container for action
        pretend to be runtime: If parent actionSet has been included in a call to xrAttachSessionActionSets, the implementation must return XR_ERROR_ACTIONSETS_ALREADY_ATTACHED.
    xrDestroyAction
        if BOUND_IN_OVERLAY:
            delete from
        Destroy
        Overlay - delete local container, delete handle from parent ActionSet

xrSuggestInteractionProfileBindings
    save bindings for comparison
        only one set of bindings per interaction profile so replace old ones on profile with new ones on profile
    pretend to be runtime if is attached localAction
        if any action is attached localAction, XR_ERROR_ACTIONSETS_ALREADY_ATTACHED
        If interaction profile path does not follow structure defined in Interaction Profiles or suggested bindings contain paths that do not follow format defined in Device input subpaths, XR_ERROR_PATH_UNSUPPORTED

xrAttachSessionActionSets
    Overlay
        must pretend to be runtime: return XR_ERROR_ACTIONSETS_ALREADY_ATTACHED if OVERLAY 
        note in Session; actionsets and actions
        mark actionsets and actions bound to OVERLAY, mutable = false
    Main
        execute normally
        mark actionsets and actions bound to MAIN, mutable = false

xrGetCurrentInteractionProfile
    Main
        execute normally - anything else?
    Overlay
        if actionsets not attached, XR_ERROR_ACTIONSETS_NOT_ATTACHED
        IPC to main to get path
            return NULL_PATH if not yet actionsets attached
            return profile string to overlay
        if it matches any provided to SuggestInteractionProfile on overlay
            return that one
        else
            if it matches one we know how to convert to KHR
                return KHR
            else
                return NULL_PATH
    MainAsOverlay
        return result or NULL_PATH if not attached

xrSyncActions
    Main
        copy all main action state into those actions
    Overlay
        IPC binding paths to MainAsOverlay
    MainAsOverlay
        for all actions on overlay side
            name = suggestedbindings
        xrEnumerateBoundSourcesForAction for all actions on Overlay side
        call xrSyncActions on bound actionsets?
        get all bound actions from Overlay and pass back

xrEnumerateBoundSourcesForAction
    (and xrGetInputSourceLocalizedName, less important)

GetActionState
    xrGetActionStateBoolean
    xrGetActionStateFloat
    xrGetActionStateVector2f
    xrGetActionStatePose
    Overlay
        pretend to be runtime
            if function doesn't match action type, XR_ERROR_ACTION_TYPE_MISMATCH
            XR_ERROR_ACTIONSET_NOT_ATTACHED
        return values previously stored by xrSyncActions
    MainAsOverlay
        nothing?
    Main
        call normally

HapticFeedback
    xrStopHapticFeedback
    xrApplyHapticFeedback
        Overlay
            has to map local actions to remote actions
        MainAsOverlay
            call on Action matching the paths provided
        Main
            normal

xrCreateActionSpace
    For xrCreateActionSpace, the action and a subpath are used to disambiguate which path may be used
        but still an action must be bound to a path through an interaction profile
    need to map overlay action to remote action somehow



need to emit for XrPath, XrAction, XrActionSet, XrSystemId
    Overlay side function to pack up a request to main to create one
        XrPath -> string used on creation in Overlay
        XrActionSet -> XrCreateActionSetInfo used on creation in Overlay
        XrAction -> XrCreateActionInfo used on creation in Overlay
    MainAsOverlay function to create those bits
    need to carefully manage errors

possibly_IPC_commands = { Session and all child handle commands }
in Python, if command_name in IPC_commands,
    emit in CommandName:
        check local handle to see if remote proxy
        if(remote proxy)
            CommandNameOverlay(params)
        else
            CommandNameMain(params)
    emit CommandNameOverlay(params)
        for each handle in parameters in XrSpace, XrSwapchain
            substitute proxy handle
        for each handle in parameters in XrAction, XrActionSet
            if there is no proxy handle, create the proxy handle through main
        for each atom in parameters in XrPath, XrSystemId
            if there is no proxy atom, create the proxy atom through main
        substitute proxy Handles and Paths in parameters to send
        pack up commands, add pointers to list, make pointers relative, send over IPC
        unpack results
        deproxy Handles and Paths in returned parameters
        if created XrSpace or XrSwapchain,
            create unique id, return that
    emit CommandNameMain(params)
        call downchain normally with possible caching of create params
    emit CommandNameMainAsOverlay(params)
        take mutex
        call downchain
        return result
    emit body of thread loop looking in shared mem for command name ID
        make pointers absolute
        call CommandNameMainAsOverlay
        make pointers relative
        return result
